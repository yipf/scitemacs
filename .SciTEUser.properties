[ Position ]

caret.period=0

if PLAT_WIN
	position.left=0
	position.top=0
if PLAT_GTK
	position.left=5
	position.top=22
position.maximize=1

[ Fonts ]
# Give symbolic names to the set of fonts used in the standard styles.
if PLAT_WIN 
	font.base=font:Verdana,size:10
	font.small=font:Verdana,size:8
	font.comment=font:Comic Sans MS,size:9
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.code.comment.nested=$(font.comment)
	font.text=font:Times New Roman,size:11
	font.text.comment=font:Verdana,size:9
	font.embedded.base=font:Verdana,size:9
	font.embedded.comment=font:Comic Sans MS,size:8
	font.monospace=font:Courier New,size:10
	font.vbs=font:Lucida Sans Unicode,size:10
if PLAT_GTK
	font.base=font:DejaVu Sans Mono,size:13 
	#~ font.base=font: Inconsolata,size:13 
	#~ font.base=font:!文泉驿微米黑,size:13 
	font.small=font:!Bitstream Vera Sans,size:12
	font.comment=font:!Bitstream Vera Serif,size:13
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.code.comment.nested=$(font.comment)
	font.text=font:!Bitstream Charter,size:10
	font.text.comment=font:!Serif,size:9
	font.embedded.base=font:!Serif,size:9
	font.embedded.comment=font:!Serif,size:9
	font.monospace=font:!DejaVu Sans Mono,size:13
	font.vbs=font:!Bitstream Vera Sans Mono,size:9
	
font.js=$(font.comment)
# Give symbolic names to the set of clours used in the standard styles.

[ colors ]
colour.comment=fore:#bbdd88,italics

#~ colour.comment=fore:#ffffff

colour.code.comment.box=$(colour.comment)
colour.code.comment.line=$(colour.comment)
colour.code.comment.doc=$(colour.comment)
colour.code.comment.nested=$(colour.comment)
colour.text.comment=$(colour.comment)
colour.other.comment=$(colour.comment)
colour.embedded.comment=$(colour.comment)


colour.notused=back:#FF0000

colour.number=fore:#ffff88
colour.keyword=fore:#88ffff
colour.string=fore:#88ff88
colour.char=fore:#ffcc88


#~ colour.number=fore:#ffff88
#~ colour.keyword=fore:#729FCA
#~ colour.string=fore:#76C834
#~ colour.char=fore:#76C834

colour.operator=fore:#ffffff
colour.preproc=fore:#00ff00
colour.error=fore:#FFFF00,back:#FF0000

[lpeg]

#~ import lexers/lpeg
#~ lexer.lpeg.color.theme=my-theme

[ configs for all]


#~ stdstyle.bg=back:#2e3434

#~ stdstyle.fg=fore:#eedeab

#~ stdstyle.bg=back:#1A1A1A




std.color.fg=#C3C3C3
std.color.fg=#dddddd
std.color.fg=#ffffff
std.color.bg=#3D3D3D
std.color.bg=#333333
std.color.bg=#000000
#~ std.color.bg=#0e2a1a

#~ std.color.bg=#CCE8CF
#~ std.color.fg=#2D2D27

stdstyle.fg=fore:$(std.color.fg)
stdstyle.bg=back:$(std.color.bg)

style.hypertext.0=fore:#FFFFFF,$(font.text)

# Default
style.*.32=$(font.base),$(stdstyle.fg),$(stdstyle.bg)
# Line number
style.*.33=$(font.base),$(stdstyle.fg),$(stdstyle.bg)
# Brace highlight ()
style.*.34=fore:#FFFFFF,back:#88ff88,bold
# Brace incomplete highlight
style.*.35=fore:#FFFFFF,back:#ff8888,bold
# Control characters
style.*.36=
# Indentation guides
style.*.37=fore:#C0C0C0,back:#FFFFFF

# set up the layout of pane
split.vertical=0

[ configs for .pros ]
style.props.2=$(colour.keyword),bold,back:#666666,eolfilled

[ configs for output pannel]

######  the  pane settings

style.errorlist.32=$(stdstyle.fg),$(font.monospace)
# Default
style.errorlist.0=$(stdstyle.fg)
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#ff0000
# Microsoft Error
style.errorlist.3=fore:#808000
# command or return status
style.errorlist.4=$(colour.keyword)
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#00007F
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#FF0000
# HTML Tidy
style.errorlist.19=fore:#FF0000
# Java runtime stack trace
style.errorlist.20=fore:#FF0000
# Text matched with find in files and message part of GCC errors
style.errorlist.21=fore:#000000,back:#ffffff
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

lexer.errorlist.value.separate=1

clear.before.execute=1

[ configs for common editor pannel ]
######  the main editor settings

#~ virtual.space=3
view.indentation.guides=1

buffers=100
find.mark=1
toolbar.visible=0
tabbar.visible=1

code.page=65001
wrap=1
save.session=1

title.full.path=1


find.use.strip=1
replace.use.strip=1

load.on.activate=1
 #~ save.on.deactivate=1

# indents
backspace.unindents=1
tabsize=4
indent.size=4
use.tabs=1
indent.auto=1
tab.indents=1
# caret
caret.line.back.alpha=32
caret.line.back=#FFFFFF
caret.period=0
caret.width=10
caret.fore=#FFFFFF
 
# selection
selection.fore=$(std.color.bg)
selection.back=#CCC3C3
selection.alpha=256

# setup the line number
line.margin.visible=1
line.margin.width=3+

indicators.under=0
indicators.alpha=255

filter.lua=*.lua;*.wlua;
filter.props=*.properties

abbreviations.$(filter.props)=$(SciteUserHome)/properties_abbrev.properties
abbreviations.$(filter.lua)=$(SciteUserHome)/lua_abbrev.properties

# change the lua setup
[ configs for lua]
#Default
style.lua.32=$(font.code.base),$(stdstyle.fg),$(stdstyle.bg)
	

# Block comment (Lua 5.0)
style.lua.1=$(colour.code.comment.box),$(font.code.comment.box),eolfilled

#other keywords
style.lua.13=$(style.lua.5)
style.lua.14=$(style.lua.5)
style.lua.15=$(style.lua.5)
style.lua.16=$(style.lua.5)
style.lua.17=$(style.lua.5)
style.lua.18=$(style.lua.5)
style.lua.19=$(style.lua.5)


file.patterns.lua=*.lua;*.wlua;*.lsvg;*.ysvg;*.luajit;*.gsl;

command.go.*.wlua=env LD_LIBRARY_PATH=/usr/lib/i386-linux-gnu:$LD_LIBRARY_PATH lua5.1 "$(FileNameExt)"
command.go.*.lua=time luajit "$(FileNameExt)"
command.go.*.luajit=time luajit "$(FileNameExt)"

processor.dir.ysvg=/home/yipf/lua-svg

#~ command.go.$(file.patterns.lsvg)=lua -e'package.path="$(processor.dir.lsvg)/?.lua;"..package.path;' -lsvg $(FileNameExt) $(FileName).svg
#~ command.go.*.lsvg=lua -e'package.path="$(processor.dir.lsvg)/?.lua;"..package.path;' -lsvg $(FileNameExt) $(FileName).svg
#~ command.go.subsystem.*.lsvg=0

#~ command.build.*.lsvg=lua -e'package.path="$(processor.dir.lsvg)/?.lua;"..package.path;' -lsvg-last $(FileNameExt) $(FileName).svg
#~ command.build.subsystem.*.lsvg=0

command.go.*.ysvg=luajit  "$(processor.dir.ysvg)/lua2svg.lua" "$(FileNameExt)"
command.go.subsystem.*.ysvg=0


processor.dir.lsvg=/home/yipf/lua-img

command.go.*.lsvg=luajit  "$(processor.dir.lsvg)/lua2img.lua" "$(FileNameExt)"
command.go.subsystem.*.lsvg=0

command.build.*.lsvg=luajit  "/home/yipf/lua-utils/svg/main.lua" "$(FileNameExt)"
command.build.subsystem.*.lsvg=0


#~ command.go.*.gsl=cd /host/Files/DLU/git-projects/gsl-shell/ && ./gsl-shell "$(FilePath)"

 command.go.*.gsl=cd /host/Files/DLU/git-projects/gsl-shell/ && ./gsl-shell "$(FilePath)"
command.go.subsystem.*.gsl=0

command.help.$(file.patterns.lua)=chmsee /host/Tinyprograme/Lua/docs/lua5_1_4_Docs.chm
command.help.subsystem.$(file.patterns.lua)=2

abbreviations.$(file.patterns.lua)=$(SciteUserHome)/lua_abbrev.properties

# Literal string
style.lua.8=$(colour.string)
# for bash


[config for python]

# Python styles
# White space
style.python.0=$(stdstyle.fg)
# Comment
style.python.1=$(colour.comment),$(font.comment)
# Number
style.python.2=$(colour.number)
# String
style.python.3=$(colour.string),$(font.monospace)
# Single quoted string
style.python.4=$(colour.char),$(font.monospace)
# Keyword
style.python.5=$(colour.keyword),bold
# Triple quotes
style.python.6=$(colour.string)
# Triple double quotes
style.python.7=$(colour.string)
# Class name definition
style.python.8=$(colour.number),bold
# Function or method name definition
style.python.9=$(colour.char),bold
# Operators
style.python.10=bold
# Identifiers
style.python.11=
# Comment-blocks
style.python.12=$(colour.comment)
# End of line where string is not closed
style.python.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Highlighted identifiers
style.python.14=fore:#407090
# Decorators
style.python.15=$(colour.string),bold
# Matched Operators
style.python.34=fore:#0000FF,bold
style.python.35=fore:#FF0000,bold
# Braces are only matched in operator style
braces.python.style=10

file.patterns.py=*.py;*.pyw;*.bpy

command.go.*.bpy=blender -b -P "$(FilePath)"  -o "//$(FileName)_######" -F PNG -s 1 -e 1 -a
command.build.*.bpy=python -c "import py_compile; py_compile.compile(r'$(FilePath)')"

command.go.*.py=python3 -u "$(FilePath)"
command.build.*.py=python3 -c "import py_compile; py_compile.compile(r'$(FilePath)')"

abbreviations.$(file.patterns.py)=$(SciteUserHome)/py_abbrev.properties


[ configs for bash]
style.bash.32=$(stdstyle.fg),$(stdstyle.bg)

# Identifiers (functions, etc.)
style.bash.8=
# Scalars: $var
style.bash.9=$(colour.keyword)
# Parameter expansion: ${var}
style.bash.10=$(colour.keyword)

# Braces are only matched in operator style
braces.bash.style=7
comment.block.bash=#~

command.go.$(file.patterns.bash)=./$(FileNameExt)

[ configs for tex ]
# for tex
# Comment
style.tex.0=$(colour.comment)
# Special 
style.tex.1=$(colour.operator)
# Group { and }
style.tex.2=$(colour.operator)
# Symbol & _ ^ + 
style.tex.3=$(colour.string)
# Command
style.tex.4=$(colour.keyword)
# Text
# style.tex.5=fore:#000000

style.tex.34=$(colour.operator)
style.tex.35=$(colour.operator)


#~ command.compile.$(file.patterns.tex)=
#~ command.build.$(file.patterns.tex)=pdflatex $(FileName) && bibtex $(FileName) && pdflatex $(FileName) && pdflatex $(FileName) 
#~ command.go.$(file.patterns.tex)=evince $(FileName).pdf
#~ command.go.subsystem.$(file.patterns.tex)=2

command.compile.$(file.patterns.tex)= 
command.build.$(file.patterns.tex)=latex $(FileName) && dvips $(FileName).dvi -E -o $(FileName).eps && convert -density 300 $(FileName).eps $(FileName).png
command.go.$(file.patterns.tex)=latex $(FileName) && bibtex $(FileName) && latex $(FileName)

command.help.$(file.patterns.tex)=evince /host/Files/pstricks-doc.pdf


abbreviations.$(file.patterns.tex)=$(SciteUserHome)/tex_abbrev.properties
command.help.subsystem.$(file.patterns.tex)=2
#~ ------------------------------------------------------------------
#~ YAML
#~ ------------------------------------------------------------------
[ configs for YAML]

#~ # default
#~ style.yaml.0=$(stdstyle.fg),$(stdstyle.bg)
#~ # comment line
#~ style.yaml.1=$(font.comment)
#~ # value identifier
#~ style.yaml.2=$(colour.keyword)
#~ # keyword value
#~ style.yaml.3=$(colour.string)
#~ # numerical value
#~ style.yaml.4=$(colour.number)
#~ # reference/repeating value
#~ style.yaml.5=$(colour.operator)
#~ # document delimiting line
#~ style.yaml.6=$(colour.comment),bold,eolfilled
#~ # text block marker
#~ style.yaml.7=$(colour.string)
#~ # syntax error marker
#~ style.yaml.8=$(font.text),italics,bold,eolfilled

# YAML font styles
# default
style.yaml.0=$(stdstyle.fg),$(stdstyle.bg)
# comment line
style.yaml.1=$(font.comment),$(colour.comment)
# value identifier
style.yaml.2=$(font.base)
# keyword value
style.yaml.3=$(colour.keyword)
# numerical value
style.yaml.4=$(colour.number)
# reference/repeating value
style.yaml.5=$(colour.keyword)
# document delimiting line
style.yaml.6=$(font.comment),$(colour.comment),eolfilled
# text block marker
style.yaml.7==$(colour.string)
# syntax error marker
style.yaml.8=$(font.text),italics,bold,eolfilled
# operator
style.yaml.9=$(colour.operator)

keywords.$(file.patterns.yaml)=^@

[markdown]

file.patterns.markdown=*.md;*.markdown

filter.markdown=Markdown (md markdown)|$(file.patterns.markdown)|

lexer.$(file.patterns.markdown)=markdown
# ------------------------------------------------------------------
# SciTE settings for Haskell
# ------------------------------------------------------------------
[gnuplot]

command.go.$(file.patterns.gnuplot)=env LC_ALL=zh_CN.UTF-8 gnuplot -e "set term png font \"/usr/share/fonts/truetype/wqy/wqy-microhei.ttc, 15\"; set output \"$(FileName).png\"" $(FileNameExt)
command.compile.$(file.patterns.gnuplot)=
command.build.$(file.patterns.gnuplot)=


[ configs for haskell ]

# files
file.patterns.haskell=*.hs;

filter.haskell=Haskell (hs)|$(file.patterns.haskell)|

#~ file.patterns.braces=$(file.patterns.ml);$(file.patterns.haskell)

lexer.$(file.patterns.haskell)=haskell

# the standard haskell language "textual" keywords
keywords.$(file.patterns.haskell)= \
case class data default deriving do else \
forall if import in infix infixl infixr instance \
let module newtype of return then type where _

word.characters.$(file.patterns.haskell)=$(chars.alpha)$(chars.numeric)_'

comment.stream.start.haskell={-
comment.stream.end.haskell=-}
comment.block.haskell=-- ~
comment.block.at.line.start.haskell=1
comment.box.start.haskell={-
comment.box.middle.haskell= -
comment.box.end.haskell= -}

# "Out-of-the-box" syntax colors are defined here
# Default
style.haskell.32=$(font.base)
# White space
style.haskell.0=fore:#808080
# Identifiers
style.haskell.1=
# Keywords (builtin language-defined keywords)
style.haskell.2=$(colour.keyword),bold
# Number constant
style.haskell.3=$(colour.number)
# String constant
style.haskell.4=$(colour.string)
# Character constant
style.haskell.5=$(colour.char)
# ???
style.haskell.6=
# ???
style.haskell.7=
# Types
style.haskell.8=$(colour.preproc)
# Type constructors
style.haskell.9=$(colour.preproc)
# ???
style.haskell.10=
# Operators
style.haskell.11=$(colour.operator),bold
# ???
style.haskell.12=
# single comment
style.haskell.13=$(colour.code.comment.line),$(font.code.comment.line)
# block comments
style.haskell.14=$(colour.code.comment.box),$(font.code.comment.box)

# Braces are only matched in operator style
braces.haskell.style=11




#~ ------------------------------------------------------------------
#~ my new mode
#~ ------------------------------------------------------------------

[ configs for ydoc]

#~ processor.dir.ydoc=/host/Files/lua-cweb/lab
processor.dir.ydoc=/host/Files/lua-ydoc/

file.patterns.ydoc=*.ydoc;

filter.ydoc=BLOCK (blk ydoc)|$(file.patterns.ydoc)|

lexer.$(file.patterns.ydoc)=script_ydoc
# preprocessing in lua, not used but used for setting properties in ydoc documents
 
#title level
style.script_ydoc.32=$(font.comment)

style.script_ydoc.1=$(colour.keyword),bold
style.script_ydoc.2=$(colour.string),bold
style.script_ydoc.3=$(colour.char),bold
style.script_ydoc.4=$(colour.number),bold
style.script_ydoc.5=bold
style.script_ydoc.6=bold
style.script_ydoc.7=bold
style.script_ydoc.8=bold
style.script_ydoc.9=bold

# props
style.script_ydoc.10=$(font.monospace),$(colour.string)
#block
style.script_ydoc.11=$(colour.keyword)

style.script_ydoc.12=$(colour.number)

# eq
style.script_ydoc.21=italics,$(colour.keyword),font:Dejavu Serif
#inline block
style.script_ydoc.22=$(colour.string),$(font.monospace)
# em
style.script_ydoc.23=bold, fore:#ffffff
# ref
style.script_ydoc.24=underlined,$(colour.keyword),$(font.monospace)
#quote
style.script_ydoc.25=italics,$(colour.string)

command.go.$(file.patterns.ydoc)=lua $(processor.dir.ydoc)/convert.lua $(FileNameExt)
command.go.subsystem.$(file.patterns.ydoc)=0

command.compile.$(file.patterns.ydoc)=lua /home/yipf/lua-org/org.lua $(1) $(FileNameExt)
command.compile.subsystem.$(file.patterns.ydoc)=0

#~ command.compile.$(file.patterns.ydoc)=ydoc_update_cite
#~ command.compile.subsystem.$(file.patterns.ydoc)=3

command.build.$(file.patterns.ydoc)=* ydoc_update $(1)
command.build.subsystem.$(file.patterns.ydoc)=3

abbreviations.$(file.patterns.ydoc)=$(SciteUserHome)/ydoc_abbrev.properties

command.name.30.$(file.patterns.ydoc)=List refs 
command.30.$(file.patterns.ydoc)=ydoc_list_ref
command.subsystem.30.$(file.patterns.ydoc)=3
command.shortcut.30.$(file.patterns.ydoc)=Alt+r
command.mode.30.$(file.patterns.ydoc)=savebefore:no

command.name.31.$(file.patterns.ydoc)=List cites
command.31.$(file.patterns.ydoc)=ydoc_list_cite
command.subsystem.31.$(file.patterns.ydoc)=3
command.shortcut.31.$(file.patterns.ydoc)=Alt+c
command.mode.31.$(file.patterns.ydoc)=savebefore:no



[ configs for org]	

#~ processor.dir.org=/host/Files/lua-cweb/lab
#~ processor.dir.org=/home/yipf/lua-org/
#~ processor.dir.org=/home/yipf/lua-utils/org/
#~ templates.dir.org=/home/yipf/lua-utils/org/templates/

#~ file.patterns.org=*.org;

#~ lexer.$(file.patterns.org)=script_org
# preprocessing in lua, not used but used for setting properties in org documents
#~ comment.block.script_org=@COMMENT ~
#~ comment.block.at.line.start.script_org=1

#~ style.script_org.32=$(font.comment)

#~ style.script_org.0=back:#000000,eolfilled

#~ #title level
#~ style.script_org.1=$(colour.keyword),bold
#~ style.script_org.2=$(colour.number),bold
#~ style.script_org.3=$(colour.string),bold
#~ style.script_org.4=$(colour.char),bold
#~ style.script_org.5=bold

#~ # props
#~ style.script_org.10=$(colour.comment)
#~ #block
#~ style.script_org.11=$(colour.keyword)

#~ style.script_org.12=$(colour.number)

#~ # eq
#~ style.script_org.21=italics,$(colour.keyword),font:Dejavu Serif
#~ #inline block
#~ style.script_org.22=$(colour.string),$(font.monospace)
#~ # em
#~ style.script_org.23=bold, fore:#ffffff
#~ # ref
#~ style.script_org.24=underlined,$(colour.keyword),$(font.monospace),style:roundbox,outlinealpha:140,fillalpha:80
#~ #quote
#~ style.script_org.25=italics

#~ command.go.$(file.patterns.org)=* luajit $(processor.dir.org)/org-main.lua  $(1) $(FileNameExt) $(templates.dir.org)
#~ command.go.subsystem.$(file.patterns.org)=0

#~ command.go.$(file.patterns.org)=* luajit $(processor.dir.org)/main.lua $(1) "$(FileNameExt)"
#~ command.go.subsystem.$(file.patterns.org)=0

#~ command.compile.$(file.patterns.org)=org_update_cite
#~ command.compile.subsystem.$(file.patterns.org)=3

#~ command.build.$(file.patterns.org)=* org_update $(1)
#~ command.build.subsystem.$(file.patterns.org)=3

#~ abbreviations.$(file.patterns.org)=$(SciteUserHome)/org_abbrev.properties

#~ command.name.30.$(file.patterns.org)=List refs 
#~ command.30.$(file.patterns.org)=org_list_ref
#~ command.subsystem.30.$(file.patterns.org)=3
#~ command.shortcut.30.$(file.patterns.org)=Alt+r
#~ command.mode.30.$(file.patterns.org)=savebefore:no

#~ command.name.31.$(file.patterns.org)=List cites
#~ command.31.$(file.patterns.org)=org_list_cite
#~ command.subsystem.31.$(file.patterns.org)=3
#~ command.shortcut.31.$(file.patterns.org)=Alt+c
#~ command.mode.31.$(file.patterns.org)=savebefore:no

#~ command.name.32.$(file.patterns.org)=Up levels
#~ command.32.$(file.patterns.org)=org_up_levels
#~ command.subsystem.32.$(file.patterns.org)=3
#~ command.shortcut.32.$(file.patterns.org)=Alt+Left
#~ command.mode.32.$(file.patterns.org)=savebefore:no

#~ command.name.33.$(file.patterns.org)=Down levels
#~ command.33.$(file.patterns.org)=org_down_levels
#~ command.subsystem.33.$(file.patterns.org)=3
#~ command.shortcut.33.$(file.patterns.org)=Alt+Right
#~ command.mode.33.$(file.patterns.org)=savebefore:no


[ configs for blocks]

#~ file.patterns.blocks=*.blk;*.blocks

#~ filter.blocks=BLOCK (blk blocks)|$(file.patterns.blocks)|

#~ lexer.$(file.patterns.blocks)=lua


#~ keywords.$(file.patterns.blocks)= $(internal.funcs.blocks)$(special.operator.blocks)$(props.blocks)$(elements.blocks)$(toc.blocks)
keywords.$(file.patterns.blocks)= ^__
#~ unused														
# Keyword
#~ style.lisp.3=$(colour.keyword),$(font.monospace)
# White space
#~ style.lisp.0=$(stdstyle.fg)

 #~ key word x styles
#~ style.blocks.11=fore:#ffffff,back:#F5FFF5
#~ style.blocks.12=fore:#ffffff,back:#F5F5FF
#~ style.blocks.13=fore:#ffffff,back:#F5FFF5
#~ style.blocks.14=fore:#ffffff,back:#F5F5FF
#~ style.blocks.15=fore:#ffffff,back:#FFF5F5
#~ style.blocks.16=fore:#ffffff,back:#FFF5FF
#~ style.blocks.17=fore:#ffffff,back:#FFFFF5
#~ style.blocks.18=fore:#ffffff,back:#FFA0A0
#~ style.blocks.19=fore:#ffffff,back:#FFF5F5

#~ processor.dir.blocks=/host/Files/lua-noweb
#~ processor.dir.blocks=/host/Files/lua-lab/structured_file/

#~ command.go.$(file.patterns.blocks)=lua $(processor.dir.blocks)/convert.lua $(FileNameExt) latex
#~ command.go.$(file.patterns.blocks)=lua $(processor.dir.blocks)/convert.lua $(FileNameExt)
#~ command.go.subsystem.$(file.patterns.blocks)=0

#~ command.compile.$(file.patterns.blocks)=blocks_update_cite
#~ command.compile.subsystem.$(file.patterns.blocks)=3

#~ command.build.$(file.patterns.blocks)=blocks_update_ref $(FileNameExt)
#~ command.build.subsystem.$(file.patterns.blocks)=3


#~ command.name.30.$(file.patterns.blocks)=List refs
#~ command.30.$(file.patterns.blocks)=blocks_list_ref
#~ command.subsystem.30.$(file.patterns.blocks)=3
#~ command.shortcut.30.$(file.patterns.blocks)=Alt+r
#~ command.mode.30.$(file.patterns.blocks)=savebefore:no

#~ command.name.31.$(file.patterns.blocks)=List cites
#~ command.31.$(file.patterns.blocks)=blocks_list_cite
#~ command.subsystem.31.$(file.patterns.blocks)=3
#~ command.shortcut.31.$(file.patterns.blocks)=Alt+c
#~ command.mode.31.$(file.patterns.blocks)=savebefore:no

#~ command.name.32.$(file.patterns.blocks)=Edit block
#~ command.32.$(file.patterns.blocks)=open_block $(CurrentSelection)
#~ command.subsystem.32.$(file.patterns.blocks)=3
#~ command.shortcut.32.$(file.patterns.blocks)=Alt+d
#~ command.mode.32.$(file.patterns.blocks)=savebefore:no

#~ command.name.33.$(file.patterns.blocks)=Preview block
#~ command.33.$(file.patterns.blocks)=preview_block $(CurrentSelection)
#~ command.subsystem.33.$(file.patterns.blocks)=3
#~ command.shortcut.33.$(file.patterns.blocks)=Alt+w
#~ command.mode.33.$(file.patterns.blocks)=savebefore:no

#~ abbreviations.$(file.patterns.blocks)=$(SciteUserHome)/blocks_abbrev.properties

[config for graphviz: .dot]

file.patterns.dot=*.dot;
abbreviations.$(file.patterns.dot)=$(SciteUserHome)/dot_abbrev.properties

command.go.$(file.patterns.dot)=dot -Tsvg "$(FileNameExt)" -o "$(FileName).svg"
command.go.subsystem.$(file.patterns.dot)=0

command.compile.$(file.patterns.dot)=dot -Tpdf "$(FileNameExt)" -o "$(FileName).pdf"
command.compile.subsystem.$(file.patterns.dot)=0

command.build.$(file.patterns.dot)=dot -Teps "$(FileNameExt)" -o "$(FileName).eps"
command.build.subsystem.$(file.patterns.dot)=0


[config for new_lang: .nl]

file.patterns.nl=*.nl;

lexer.$(file.patterns.nl)=lua
keywords.$(file.patterns.nl)= ^__

processor.dir.nl=/host/Files/lua_new_lang

command.go.$(file.patterns.nl)=lua $(processor.dir.nl)/interpreter.lua $(FilePath)
command.go.subsystem.$(file.patterns.nl)=0




[ Language menu ]

#~ ------------------------------------------------------------------
#~ menu list for mode
#~ ------------------------------------------------------------------
menu.language=\
#FreeBasic|bas||\
Text|txt|Shift+F11|\
Ada|ads||\
#Apache Confi&g|conf||\
Assembler|asm||\
#ASN.1|asn1||\
#Avenue|ave||\
#Baan|bc||\
&Batch|bat||\
Blocks|blocks||\
#Bullant|ant||\
&C / C++|c||\
#CMake|cmake||\
C&#|cs||\
#COBOL|cob||\
#Csound|orc||\
CSS|css||\
D|d||\
&Difference|diff||\
#&Eiffel|e||\
#Erlang|erl||\
&Errorlist|err||\
#FlagShip|prg||\
#Forth|forth||\
&Fortran|f90||\
#Gap|g||\
H&ypertext|html|F12|\
Haskell|hs||\
#&InnoSetup|iss||\
&Java|java||\
Java&Script|js||\
#&Kix|kix||\
Lisp|lisp||\
#Lot|lot||\
#Lout|lt||\
Lu&a|lua||\
Matlab|m.matlab||\
&Makefile|mak|Ctrl+Shift+F11|\
#MetaPost|mp||\
#MMIXAL|mms||\
#Modula-3|m3||\
#&nnCron crontab|tab||\
#NSIS|nsis||\
#Objective Caml|ml||\
#Octave|m.octave||\
#Opal|impl||\
Pascal|pas||\
Pe&rl|pl||\
P&HP|php||\
#P&LSQL|spec||\
#P&ostScript|ps||\
#P&OV-Ray SDL|pov||\
#PowerShell|ps1||\
#PowerPro|powerpro||\
&Properties|properties||\
Pytho&n|py||\
#R|R||\
#Reso&urce|rc||\
Ruby|rb||\
Shell|sh||\
S&QL|sql||\
#Specman|e||\
&TCL|tcl||\
TeX|tex||\
#&txt2tags|t2t||\
&VB|vb||\
VBScr&ipt|vbs||\
#Verilog|v||\
#VHDL|vhd||\
&XML|xml|Shift+F12|\
YAML|yaml||

import *


[script lexer: GTD ]	

file.patterns.gtd=*.gtd

lexer.$(file.patterns.gtd)=script_gtd

file.gtd=/home/yipf/gtd.gtd
# -
style.script_gtd.1=$(colour.number)
# [toggle,yes]
style.script_gtd.2=$(colour.string),bold,$(font.monospace)
# <time-stramp>
style.script_gtd.3=$(colour.keyword),underlined,$(font.monospace)
#[toggle.no]
style.script_gtd.12=fore:#ff0000,bold,$(font.monospace)


command.name.30.$(file.patterns.gtd)=toggle a task
command.30.$(file.patterns.gtd)=dostring gtd_toggle_line()
command.subsystem.30.$(file.patterns.gtd)=3
command.shortcut.30.$(file.patterns.gtd)=Alt+d
command.mode.30.$(file.patterns.gtd)=savebefore:no

command.name.31.$(file.patterns.gtd)=insert current time
command.31.$(file.patterns.gtd)=dostring gtd_insert_current_time()
command.subsystem.31.$(file.patterns.gtd)=3
command.shortcut.31.$(file.patterns.gtd)=Alt+c
command.mode.31.$(file.patterns.gtd)=savebefore:no

#~ command.name.31.$(file.patterns.gtd)=update a task
#~ command.31.$(file.patterns.gtd)=dostring gtd_update_line()
#~ command.subsystem.31.$(file.patterns.gtd)=3
#~ command.shortcut.31.$(file.patterns.gtd)=Alt+u
#~ command.mode.31.$(file.patterns.gtd)=savebefore:no



#~ command.name.32.$(file.patterns.gtd)=Insert a new line
#~ command.32.$(file.patterns.gtd)=dostring gtd_newline()
#~ command.subsystem.32.$(file.patterns.gtd)=3
#~ command.shortcut.32.$(file.patterns.gtd)=Alt+Enter
#~ command.mode.32.$(file.patterns.gtd)=savebefore:no

abbreviations.$(file.patterns.gtd)=$(SciteUserHome)/gtd_abbrev.properties


command.go.$(file.patterns.gtd)=gtd_get_things_to_do
command.go.subsystem.$(file.patterns.gtd)=3

[script lexer: noweb ]	

file.patterns.noweb=*.nw

lexer.$(file.patterns.noweb)=script_noweb

# BEGIN
style.script_noweb.1=$(colour.number),$(font.monospace)
# END
style.script_noweb.2=$(colour.number),$(font.monospace)
# reference
style.script_noweb.21=italics,$(colour.keyword),font:Dejavu Serif
#inline block
style.script_noweb.22=$(colour.string),$(font.monospace)
# em
style.script_noweb.23=bold, fore:#ffffff
# ref
style.script_noweb.24=underlined,$(colour.keyword),$(font.monospace)
#quote
style.script_noweb.25=italics


processor.dir.noweb=/home/yipf/lua-noweb

#~ Ctrl + F
command.go.$(file.patterns.noweb)=* lua $(processor.dir.noweb)/noweb.lua $(FileNameExt) $(1)
command.go.subsystem.$(file.patterns.noweb)=0

#~ command.compile.$(file.patterns.ydoc)=ydoc_update_cite
#~ command.compile.subsystem.$(file.patterns.ydoc)=3

#~ F7
command.build.$(file.patterns.noweb)=noweb_update
command.build.subsystem.$(file.patterns.noweb)=3

command.name.30.$(file.patterns.noweb)=List refs 
command.30.$(file.patterns.noweb)=noweb_list_ref
command.subsystem.30.$(file.patterns.noweb)=3
command.shortcut.30.$(file.patterns.noweb)=Alt+r
command.mode.30.$(file.patterns.noweb)=savebefore:no

command.name.31.$(file.patterns.noweb)=Add a new block
command.31.$(file.patterns.noweb)=noweb_new_block $(CurrentSelection)
command.subsystem.31.$(file.patterns.noweb)=3
command.shortcut.31.$(file.patterns.noweb)=Alt+n
command.mode.31.$(file.patterns.noweb)=savebefore:no

command.name.32.$(file.patterns.noweb)=Jump to a block
command.32.$(file.patterns.noweb)=noweb_jump $(CurrentSelection)
command.subsystem.32.$(file.patterns.noweb)=3
command.shortcut.32.$(file.patterns.noweb)=Alt+j
command.mode.32.$(file.patterns.noweb)=savebefore:no

abbreviations.$(file.patterns.noweb)=$(SciteUserHome)/noweb_abbrev.properties


[settings for pic]
file.patterns.pic=*.pic
lexer.$(file.patterns.pic)=lua

command.go.$(file.patterns.pic)=pic2plot -T "svg" $(FileNameExt) >$(FileName).svg
command.go.subsystem.$(file.patterns.pic)=0



keywords.$(file.patterns.pic)=$(keywordclass.lua5x) $(keywordclass2.lua5x) 

abbreviations.$(file.patterns.pic)=$(SciteUserHome)/pic_abbrev.properties

[settings for cpp]

file.patterns.cpp=*.c;*.cpp;*.h;*.hpp

abbreviations.$(file.patterns.cpp)=$(SciteUserHome)/cpp_abbrev.properties

command.name.30.$(file.patterns.cpp)=insert head declare
command.30.$(file.patterns.cpp)=insert_head_dec $(FileName)
command.subsystem.30.$(file.patterns.cpp)=3
command.shortcut.30.$(file.patterns.cpp)=Alt+d
command.mode.30.$(file.patterns.cpp)=savebefore:no


command.compile.*.c=gcc $(FileNameExt) -o $(FileName)  -lgsl -lgslcblas
command.compile.subsystem.*.c=0

command.build.*.c=gcc $(FileNameExt) -fPIC -shared -o $(FileName).so  
command.build.subsystem.*.c=0

command.go.*.c=gcc *.c -std=c99  -O0 -o $(FileName) -lm && time ./$(FileName)
command.go.subsystem.*.c=0

file.patterns.shader=*.shader;
lexer.$(file.patterns.shader)=cpp

keywords.$(file.patterns.shader)=and and_eq asm auto bitand bitor bool break \
case catch char class compl const const_cast continue \
default delete do double dynamic_cast else enum explicit export extern false float for \
friend goto if inline int long mutable namespace new not not_eq \
operator or or_eq private protected public \
register reinterpret_cast return short signed sizeof static static_cast struct switch \
template this throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while xor xor_eq \
vec4 vec3 mat4 varying uniform sampler2D

abbreviations.$(file.patterns.shader)=$(SciteUserHome)/cpp_abbrev.properties


[settings for pov]

# Default
style.pov.32=$(font.code.base)
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.pov.0=fore:#FF0080
# Comment: /* */. Use fixed font to keep boxed comments as boxes
style.pov.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //. Proportionnal font is generally OK here
style.pov.2=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.pov.3=$(colour.number)
# Operators
style.pov.4=$(colour.operator)
# Identifiers (everything else...)
style.pov.5=
# Double quoted string
style.pov.6=$(colour.string)
# End of line where string is not closed
style.pov.7=bold
# Directive: #keyword
style.pov.8=$(colour.preproc)
# Directive keyword error
style.pov.9=fore:#804020,$(font.code.comment.doc),italics
# Keywords (bozo test colors :-)
# Keyword 2: Objects & CSG & Appearance (xxx {})
style.pov.10=$(colour.keyword)
# Keyword 3: Types & Modifiers & Items
style.pov.11=$(colour.keyword)
# Keyword 4: Predefined Identifiers
style.pov.12=$(colour.keyword),bold
# Keyword 5: Predefined Functions
style.pov.13=$(colour.keyword)
# Keyword 6
style.pov.14=$(colour.keyword)
# Keyword 7
style.pov.15=$(colour.keyword)
# Keyword 8
style.pov.17=$(colour.keyword)
# Braces are only matched in operator style
braces.pov.style=4

command.compile.*.pov=povray $(FileNameExt) +O$(FileName).png
command.build.*.pov=
command.go.*.pov=povray $(FileNameExt)
[Scheme]

#command.go.$(file.patterns.scheme)=c:\tools\pscheme\pscheme.exe /r $(FilePath)
command.go.$(file.patterns.scheme)= petite $(FilePath)
#command.go.$(file.patterns.scheme)=c:\tools\plt\mzscheme.exe -r $(FilePath)
command.go.subsystem.$(file.patterns.scheme)=0

#command.go.$(file.patterns.scheme)=c:\tools\pscheme\pscheme.exe /r $(FilePath)
command.build.$(file.patterns.scheme)= scheme $(FilePath)
#command.go.$(file.patterns.scheme)=c:\tools\plt\mzscheme.exe -r $(FilePath)
command.build.subsystem.$(file.patterns.scheme)=0
[ydoc]

file.patterns.ydoc=*.ydoc
lexer.$(file.patterns.ydoc)=script_ydoc

abbreviations.$(file.patterns.ydoc)=$(SciteUserHome)/ydoc_abbrev.properties

command.go.$(file.patterns.ydoc)= luajit  /home/yipf/lua-utils/ydoc/main.lua $(FilePath)
command.go.subsystem.$(file.patterns.ydoc)=0

# eq
style.script_ydoc.21=italics,$(colour.char),font:Dejavu Serif
#inline block
style.script_ydoc.22=$(colour.string),$(font.monospace)
# em
style.script_ydoc.23=bold
# ref
style.script_ydoc.24=underlined,$(colour.keyword),$(font.monospace)
#quote
style.script_ydoc.25=italics


[hypertext]
# Define SciTE settings for HTML files.

# vxml added by lseredi

# tpl is X and Mail specific
file.patterns.web=*.html;*.htm;*.asp;*.shtml;*.htd;*.jsp
file.patterns.php=*.php3;*.phtml;*.php
file.patterns.html=$(file.patterns.web);$(file.patterns.php);*.htt;*.cfm;*.tpl;*.dtd;*.hta
file.patterns.vxml=*.vxml
file.patterns.xml=*.xml;*.xsl;*.svg;*.xul;*.xsd;*.dtd;*.xslt;*.axl;*.xrc;*.rdf
file.patterns.docbook=*.docbook
file.patterns.mako=*.mak;*.mako

lexer.$(file.patterns.html)=hypertext
lexer.$(file.patterns.vxml)=hypertext
lexer.$(file.patterns.xml)=xml
lexer.$(file.patterns.docbook)=hypertext
lexer.$(file.patterns.mako)=hypertext

filter.web=Web (html htm asp shtml css xml docbook jsp)|$(file.patterns.web);*.css;*.xml;*.docbook|
filter.php=PHP (php php3 phtml)|$(file.patterns.php)|

fold.html=1
#fold.html.preprocessor=0
#fold.hypertext.comment=1
#fold.hypertext.heredoc=1

#Default Language=1 for JS, 2 for VBS.
#asp.default.language=2
#html.tags.case.sensitive=1

#lexer.html.django=1
#lexer.html.mako=1

#xml.auto.close.tags=1
#lexer.xml.allow.scripts=0

# All hypertext elements and attributes must be listed in lower case
hypertext.elements=\
a abbr acronym address applet area b base basefont \
bdo big blockquote body br button caption center \
cite code col colgroup dd del dfn dir div dl dt em \
fieldset font form frame frameset h1 h2 h3 h4 h5 h6 \
head hr html i iframe img input ins isindex kbd label \
legend li link map menu meta noframes noscript \
object ol optgroup option p param pre q s samp \
script select small span strike strong style sub sup \
table tbody td textarea tfoot th thead title tr tt u ul \
var xml xmlns

hypertext.attributes=\
abbr accept-charset accept accesskey action align alink \
alt archive axis background bgcolor border \
cellpadding cellspacing char charoff charset checked cite \
class classid clear codebase codetype color cols colspan \
compact content coords \
data datafld dataformatas datapagesize datasrc datetime \
declare defer dir disabled enctype event \
face for frame frameborder \
headers height href hreflang hspace http-equiv \
id ismap label lang language leftmargin link longdesc \
marginwidth marginheight maxlength media method multiple \
name nohref noresize noshade nowrap \
object onblur onchange onclick ondblclick onfocus \
onkeydown onkeypress onkeyup onload onmousedown \
onmousemove onmouseover onmouseout onmouseup \
onreset onselect onsubmit onunload \
profile prompt readonly rel rev rows rowspan rules \
scheme scope selected shape size span src standby start style \
summary tabindex target text title topmargin type usemap \
valign value valuetype version vlink vspace width \
text password checkbox radio submit reset \
file hidden image \
^data-

# As defined in "HTML5 differences from HTML4" Working Draft
# http://www.w3.org/TR/html5-diff/
html5.elements=\
address article aside audio base canvas command details datalist embed \
figure figcaption footer header hgroup keygen mark menu meter nav output \
progress ruby rt rp section source time video wbr

html5.attributes=\
async autocomplete autofocus contenteditable contextmenu draggable \
form formaction formenctype formmethod formnovalidate formtarget \
list manifest max min novalidate pattern placeholder \
required reversed role sandbox scoped seamless sizes spellcheck srcdoc step

keywordclass.hypertext=\
$(hypertext.elements) $(hypertext.attributes) $(html5.elements) $(html5.attributes) public !doctype

vxml.elements=\
assign audio block break catch choice clear disconnect else elseif \
emphasis enumerate error exit field filled form goto grammar help \
if initial link log menu meta noinput nomatch object option p paragraph \
param phoneme prompt property prosody record reprompt return s say-as \
script sentence subdialog submit throw transfer value var voice vxml

vxml.attributes=\
accept age alphabet anchor application base beep bridge category charset \
classid cond connecttimeout content contour count dest destexpr dtmf dtmfterm \
duration enctype event eventexpr expr expritem fetchtimeout finalsilence \
gender http-equiv id level maxage maxstale maxtime message messageexpr \
method mime modal mode name namelist next nextitem ph pitch range rate \
scope size sizeexpr skiplist slot src srcexpr sub time timeexpr timeout \
transferaudio type value variant version volume xml:lang

keywordclass.vxml=\
$(vxml.elements) $(vxml.attributes) public !doctype

# List from http://www.php.net/manual/en/reserved.php (updated for PHP 5)
# For a list with functions http://groups.google.com/group/scite-interest/web/extras
# All words should be lower case to ensure case insensitivity when comparing
keywordclass.php=\
and array as bool boolean break case cfunction class const continue declare \
default die directory do double echo else elseif empty enddeclare endfor \
endforeach endif endswitch endwhile eval exit extends false float for \
foreach function global goto if include include_once int integer isset list namespace \
new null object old_function or parent print real require require_once resource \
return static stdclass string switch true unset use var while xor \
abstract catch clone exception final implements interface php_user_filter \
private protected public this throw try \
__class__ __dir__ __file__ __function__ __line__ __method__ \
__namespace__ __sleep __wakeup

# Override keywordclass.php with another file if present
import phpfunctions

keywords.$(file.patterns.html)=$(keywordclass.hypertext)
# JavaScript keywords are possible inside embedded Javascript
keywords2.$(file.patterns.html)=$(keywordclass.javascript)
# VBScript keywords are possible inside embedded VBScript
keywords3.$(file.patterns.html)=$(keywordclass.vb)
# Python keywords are possible inside embedded Python
keywords4.$(file.patterns.html)=$(keywordclass.python)
# PHP keywords are possible inside embedded PHP
keywords5.$(file.patterns.html)=$(keywordclass.php)
# SGML / DTD keywords
keywords6.$(file.patterns.html)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

# START DocBook
docbook.elements42=\
abbrev abstract accel ackno acronym action address affiliation alt anchor \
answer appendix appendixinfo application area areaset areaspec arg article \
articleinfo artpagenums attribution audiodata audioobject author authorblurb \
authorgroup authorinitials beginpage bibliocoverage bibliodiv biblioentry \
bibliography bibliographyinfo biblioid bibliomisc bibliomixed bibliomset \
bibliorelation biblioset bibliosource blockinfo blockquote book bookinfo \
bridgehead callout calloutlist caption caution chapter chapterinfo citation \
citebiblioid citerefentry citetitle city classname classsynopsis classsynopsisinfo \
cmdsynopsis co collab collabname colophon colspec command computeroutput \
confdates confgroup confnum confsponsor conftitle constant constraint \
constraintdef constructorsynopsis contractnum contractsponsor contrib \
copyright coref corpauthor corpname country database date dedication \
destructorsynopsis edition editor email emphasis entry entrytbl envar \
epigraph equation errorcode errorname errortext errortype example \
exceptionname fax fieldsynopsis figure filename firstname firstterm \
footnote footnoteref foreignphrase formalpara funcdef funcparams \
funcprototype funcsynopsis funcsynopsisinfo function glossary glossaryinfo \
glossdef glossdiv glossentry glosslist glosssee glossseealso glossterm \
graphic graphicco group guibutton guiicon guilabel guimenu guimenuitem \
guisubmenu hardware highlights holder honorific htm imagedata imageobject \
imageobjectco important index indexdiv indexentry indexinfo indexterm \
informalequation informalexample informalfigure informaltable initializer \
inlineequation inlinegraphic inlinemediaobject interface interfacename \
invpartnumber isbn issn issuenum itemizedlist itermset jobtitle keycap \
keycode keycombo keysym keyword keywordset label legalnotice lhs lineage \
lineannotation link listitem iteral literallayout lot lotentry manvolnum \
markup medialabel mediaobject mediaobjectco member menuchoice methodname \
methodparam methodsynopsis mm modespec modifier ousebutton msg msgaud \
msgentry msgexplan msginfo msglevel msgmain msgorig msgrel msgset msgsub \
msgtext nonterminal note objectinfo olink ooclass ooexception oointerface \
option optional orderedlist orgdiv orgname otheraddr othercredit othername \
pagenums para paramdef parameter part partinfo partintro personblurb \
personname phone phrase pob postcode preface prefaceinfo primary primaryie \
printhistory procedure production productionrecap productionset productname \
productnumber programlisting programlistingco prompt property pubdate publisher \
publishername pubsnumber qandadiv qandaentry qandaset question quote refclass \
refdescriptor refentry refentryinfo refentrytitle reference referenceinfo \
refmeta refmiscinfo refname refnamediv refpurpose refsect1 refsect1info refsect2 \
refsect2info refsect3 refsect3info refsection refsectioninfo refsynopsisdiv \
refsynopsisdivinfo releaseinfo remark replaceable returnvalue revdescription \
revhistory revision revnumber revremark rhs row sbr screen screenco screeninfo \
screenshot secondary secondaryie sect1 sect1info sect2 sect2info sect3 sect3info \
sect4 sect4info sect5 sect5info section sectioninfo see seealso seealsoie \
seeie seg seglistitem segmentedlist segtitle seriesvolnums set setindex \
setindexinfo setinfo sgmltag shortaffil shortcut sidebar sidebarinfo simpara \
simplelist simplemsgentry simplesect spanspec state step street structfield \
structname subject subjectset subjectterm subscript substeps subtitle \
superscript surname sv symbol synopfragment synopfragmentref synopsis \
systemitem table tbody term tertiary tertiaryie textdata textobject tfoot \
tgroup thead tip title titleabbrev toc tocback tocchap tocentry tocfront \
toclevel1 toclevel2 toclevel3 toclevel4 toclevel5 tocpart token trademark \
type ulink userinput varargs variablelist varlistentry varname videodata \
videoobject void volumenum warning wordasword xref year

docbook.attributes=\
arch condition conformance id lang os remap role revision revisionflag security \
userlevel vendor xreflabel \
status label endterm linkend space width

keywordclass.docbook=\
$(docbook.elements42) $(docbook.attributes)

keywordclass.mako=$(keywordclass.hypertext)
keywords.$(file.patterns.mako)=$(keywordclass.hypertext)
# JavaScript keywords are possible inside embedded Javascript
keywords2.$(file.patterns.mako)=$(keywordclass.javascript)
# VBScript keywords are possible inside embedded VBScript
keywords3.$(file.patterns.mako)=$(keywordclass.vb)
# Python keywords are possible inside embedded Python
keywords4.$(file.patterns.mako)=$(keywordclass.python) include namespace inherit \
call doc text page endclass endexcept endfinally endfor endif endtry endwhile
# PHP keywords are possible inside embedded PHP
keywords5.$(file.patterns.mako)=$(keywordclass.php)
# SGML / DTD keywords
keywords6.$(file.patterns.mako)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

# For Django's template language. Since Django seems to use the same .html extension
# as plain HTML, it is up to the user to integrate these keywords if desired.
keywordclass.django= not in autoescape with \
csrf_token cycle empty block endblock filter endfilter for endfor firstof \
if endif ifchanged endifchanged ifequal endifequal include load now regroup spaceless \
endspaceless ssi url widthratio add addslashes capfirst center cut date \
default default_if_none dictsort dictsortreversed divisibleby escape escapejs \
filesizeformat first fix_ampersands float_format force_escape get_digit \
iriencode join last length length_is linebreaks linebreaksbr linenumbers ljust \
lower make_list phone2numeric pluralize pprint random removetags rjust safe \
safeseq slice slugify stringformat striptags time timesince timeuntil title \
truncatewords truncatewords_html unordered_list upper urlencode urlize \
urlizetrunc wordcount wordwrap yesno apnumber intcomma intword ordinal \
naturalday lorem

keywords.$(file.patterns.docbook)=$(keywordclass.docbook)
keywords6.$(file.patterns.docbook)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION
# END DocBook

word.characters.$(file.patterns.html)=$(chars.alpha)$(chars.numeric)_-
comment.stream.start.hypertext=<!--
comment.stream.end.hypertext=-->
comment.block.hypertext=//~

# No keyword for xml, as it accepts any keyword
keywords.$(file.patterns.xml)=
# SGML / DTD keywords
keywords6.$(file.patterns.xml)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

word.characters.$(file.patterns.xml)=$(chars.alpha)$(chars.numeric)_-

keywords.$(file.patterns.vxml)=$(keywordclass.vxml)
keywords2.$(file.patterns.vxml)=$(keywordclass.javascript)



word.characters.$(file.patterns.vxml)=$(chars.alpha)$(chars.numeric)_-

# HTML and XML share lexing code so use the same style numbers
# Hypertext Markup Language

style.hypertext.32=$(std.color.bg)

# Text
#~ style.hypertext.0=$(font.text)
# Tags
style.hypertext.1=$(colour.comment)
# Unknown Tags
style.hypertext.2=fore:#FF0000
# Attributes
style.hypertext.3=$(colour.keyword)
# Unknown Attributes
style.hypertext.4=fore:#FF0000
# Numbers
style.hypertext.5=$(colour.number)
# Double quoted strings
style.hypertext.6=$(colour.string)
# Single quoted strings
style.hypertext.7=$(colour.string)
# Other inside tag
style.hypertext.8=$(colour.comment)
# Comment
style.hypertext.9=$(colour.comment),$(font.text.comment)
# Entities
style.hypertext.10=$(colour.keyword),$(font.text)
# XML style tag ends '/>'
style.hypertext.11=fore:#000080
# XML identifier start '<?'
style.hypertext.12=fore:#0000FF
# XML identifier end '?>'
style.hypertext.13=fore:#0000FF
#  SCRIPT
style.hypertext.14=fore:#000080
# ASP <% ... %>
style.hypertext.15=back:#FFFF00
# ASP <% ... %>
style.hypertext.16=back:#FFDF00
# CDATA
style.hypertext.17=back:#FFDF00
# PHP
style.hypertext.18=fore:#0000FF,back:#FFEFBF
# Unquoted values
style.hypertext.19=fore:#FF00FF,back:#FFEFFF
# JSP Comment <%-- ... --%>
style.hypertext.20=fore:#000000,back:#FFFFD0
# SGML tags <! ... >
style.hypertext.21=fore:#000080,back:#EFEFFF
# SGML command
style.hypertext.22=fore:#000080,back:#EFEFFF,bold
# SGML 1st param
style.hypertext.23=fore:#006600,back:#EFEFFF
# SGML double string
style.hypertext.24=fore:#800000,back:#EFEFFF
# SGML single string
style.hypertext.25=fore:#993300,back:#EFEFFF
# SGML error
style.hypertext.26=fore:#800000,back:#FF6666
# SGML special (#xxxx type)
style.hypertext.27=fore:#3366FF,back:#EFEFFF
# SGML entity
style.hypertext.28=fore:#333333,back:#EFEFFF
# SGML comment
style.hypertext.29=fore:#808000,back:#EFEFFF
# SGML block
style.hypertext.31=fore:#000066,back:#CCCCE0
# Some reasonable background colours found in the default Windows palette
# Off White #FFFBF0    Light green #C0DCC0    Light Blue #A6CAF0
# Matched Operators
style.hypertext.34=fore:#0000FF,notbold,$(font.text)
style.hypertext.35=fore:#FF0000,notbold,$(font.text)

# Embedded Javascript
fontcolour.js=$(std.color.fg)
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.40=fore:#7F7F00
# JS Default
style.hypertext.41=fore:#000000,bold,$(fontcolour.js),eolfilled
# JS Comment
style.hypertext.42=$(colour.code.comment.box),$(fontcolour.js),eolfilled
# JS Line Comment
style.hypertext.43=$(colour.code.comment.line),$(fontcolour.js)
# JS Doc comment
style.hypertext.44=$(colour.code.comment.doc),bold,$(fontcolour.js),eolfilled
# JS Number
style.hypertext.45=$(colour.number),$(fontcolour.js)
# JS Word
style.hypertext.46=$(fontcolour.js)
# JS Keyword
style.hypertext.47=$(colour.keyword),bold,$(fontcolour.js)
# JS Double quoted string
style.hypertext.48=$(colour.string),$(fontcolour.js)
# JS Single quoted string
style.hypertext.49=$(colour.string),$(fontcolour.js)
# JS Symbols
style.hypertext.50=$(colour.operator),bold,$(fontcolour.js)
# JavaScript EOL
style.hypertext.51=back:#BFBBB0,eolfilled
# JavaScript RegEx
style.hypertext.52=back:#FFBBB0

# ASP Javascript
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.55=fore:#7F7F00
# JS Default
style.hypertext.56=fore:#000000,bold,$(font.js),back:#DFDF7F,eolfilled
# JS Comment
style.hypertext.57=fore:#007F00,$(font.js),back:#DFDF7F,eolfilled
# JS Line Comment
style.hypertext.58=fore:#007F00,$(font.js),back:#DFDF7F
# JS Doc comment
style.hypertext.59=fore:#7F7F7F,bold,$(font.js),back:#DFDF7F,eolfilled
# JS Number
style.hypertext.60=fore:#007F7F,$(font.js),back:#DFDF7F
# JS Word
style.hypertext.61=fore:#000000,$(font.js),back:#DFDF7F
# JS Keyword
style.hypertext.62=fore:#00007F,bold,$(font.js),back:#DFDF7F
# JS Double quoted string
style.hypertext.63=fore:#7F007F,$(font.js),back:#DFDF7F
# JS Single quoted string
style.hypertext.64=fore:#7F007F,$(font.js),back:#DFDF7F
# JS Symbols
style.hypertext.65=fore:#000000,bold,$(font.js),back:#DFDF7F
# JavaScript EOL
style.hypertext.66=back:#BFBBB0,eolfilled
# JavaScript RegEx
style.hypertext.67=back:#FFBBB0

# Embedded VBS
# Start
style.hypertext.70=
# Default
style.hypertext.71=$(font.vbs),back:#EFEFFF,fore:#000000,eolfilled
# Comment
style.hypertext.72=$(font.comment),back:#EFEFFF,fore:#008000,eolfilled
# Number
style.hypertext.73=$(font.vbs),back:#EFEFFF,fore:#008080,eolfilled
# KeyWord
style.hypertext.74=$(font.vbs),back:#EFEFFF,fore:#000080,bold,eolfilled
# String
style.hypertext.75=$(font.vbs),back:#EFEFFF,fore:#800080,eolfilled
# Identifier
style.hypertext.76=$(font.vbs),back:#EFEFFF,fore:#000080,eolfilled
# Unterminated string
style.hypertext.77=$(font.vbs),back:#7F7FFF,fore:#000080,eolfilled

# ASP VBS
# Start
style.hypertext.80=
# Default
style.hypertext.81=$(font.vbs),back:#CFCFEF,fore:#000000,eolfilled
# Comment
style.hypertext.82=$(font.comment),back:#CFCFEF,fore:#008000,eolfilled
# Number
style.hypertext.83=$(font.vbs),back:#CFCFEF,fore:#008080,eolfilled
# KeyWord
style.hypertext.84=$(font.vbs),back:#CFCFEF,fore:#000080,bold,eolfilled
# String
style.hypertext.85=$(font.vbs),back:#CFCFEF,fore:#800080,eolfilled
# Identifier
style.hypertext.86=$(font.vbs),back:#CFCFEF,fore:#000080,eolfilled
# Unterminated string
style.hypertext.87=$(font.vbs),back:#7F7FBF,fore:#000080,eolfilled

# Embedded Python
style.hypertext.90=fore:#808080
style.hypertext.91=fore:#808080,back:#EFFFEF,eolfilled
# Comment
style.hypertext.92=fore:#007F00,$(font.comment),back:#EFFFEF,eolfilled
# Number
style.hypertext.93=fore:#007F7F,back:#EFFFEF,eolfilled
# String
style.hypertext.94=fore:#7F007F,$(font.monospace),back:#EFFFEF,eolfilled
# Single quoted string
style.hypertext.95=fore:#7F007F,$(font.monospace),back:#EFFFEF,eolfilled
# Keyword
style.hypertext.96=fore:#00007F,bold,back:#EFFFEF,eolfilled
# Triple quotes
style.hypertext.97=fore:#7F0000,back:#EFFFEF,eolfilled
# Triple double quotes
style.hypertext.98=fore:#7F0000,back:#EFFFEF,eolfilled
# Class name definition
style.hypertext.99=fore:#0000FF,bold,back:#EFFFEF,eolfilled
# Function or method name definition
style.hypertext.100=fore:#007F7F,bold,back:#EFFFEF,eolfilled
# Operators
style.hypertext.101=bold,back:#EFFFEF,eolfilled
# Identifiers
style.hypertext.102=back:#EFFFEF,eolfilled

# PHP complex variable
style.hypertext.104=fore:#007F00,italics,back:#FFF8F8

# ASP Python
style.hypertext.105=fore:#808080
style.hypertext.106=fore:#808080,back:#CFEFCF,eolfilled
# Comment
style.hypertext.107=fore:#007F00,$(font.comment),back:#CFEFCF,eolfilled
# Number
style.hypertext.108=fore:#007F7F,back:#CFEFCF,eolfilled
# String
style.hypertext.109=fore:#7F007F,$(font.monospace),back:#CFEFCF,eolfilled
# Single quoted string
style.hypertext.110=fore:#7F007F,$(font.monospace),back:#CFEFCF,eolfilled
# Keyword
style.hypertext.111=fore:#00007F,bold,back:#CFEFCF,eolfilled
# Triple quotes
style.hypertext.112=fore:#7F0000,back:#CFEFCF,eolfilled
# Triple double quotes
style.hypertext.113=fore:#7F0000,back:#CFEFCF,eolfilled
# Class name definition
style.hypertext.114=fore:#0000FF,bold,back:#CFEFCF,eolfilled
# Function or method name definition
style.hypertext.115=fore:#007F7F,bold,back:#CFEFCF,eolfilled
# Operators
style.hypertext.116=bold,back:#CFEFCF,eolfilled
# Identifiers
style.hypertext.117=back:#CFEFCF,eolfilled

# PHP
# Default
style.hypertext.118=fore:#000033,back:#FFF8F8,eolfilled
# Double quoted String
style.hypertext.119=fore:#007F00,back:#FFF8F8
# Single quoted string
style.hypertext.120=fore:#009F00,back:#FFF8F8
# Keyword
style.hypertext.121=fore:#7F007F,italics,back:#FFF8F8
# Number
style.hypertext.122=fore:#CC9900,back:#FFF8F8
# Variable
style.hypertext.123=fore:#00007F,italics,back:#FFF8F8
# Comment
style.hypertext.124=fore:#999999,$(font.comment),back:#FFF8F8
# One line comment
style.hypertext.125=fore:#666666,italics,$(font.comment),back:#FFF8F8
# PHP variable in double quoted string
style.hypertext.126=fore:#007F00,italics,back:#FFF8F8
# PHP operator
style.hypertext.127=fore:#000000,back:#FFF8F8

# XML: eXtensible Markup Language
# For XML, there is no list of known tags or attributes so all are coloured known

# Default
style.xml.0=fore:#000000,$(font.text)
# Tags
style.xml.1=fore:#000080
# Unknown Tags
style.xml.2=fore:#000080
# Attributes
style.xml.3=fore:#008080
# Unknown Attributes
style.xml.4=fore:#008080
# Numbers
style.xml.5=$(colour.number)
# Double quoted strings
style.xml.6=$(colour.string)
# Single quoted strings
style.xml.7=$(colour.string)
# Other inside tag
style.xml.8=fore:#800080
# Comment
style.xml.9=fore:#808000
# Entities
style.xml.10=fore:#800080,$(font.text)
# XML style tag ends '/>'
style.xml.11=fore:#000080
# XML identifier start '<?'
style.xml.12=fore:#800080,bold
# XML identifier end '?>'
style.xml.13=fore:#800080,bold
# CDATA
style.xml.17=fore:#800000,back:#FFF0F0,$(font.text),eolfilled
# Question
style.xml.18=fore:#800000
# Unquoted Value
style.xml.19=fore:#608060
# SGML tags <! ... >
style.xml.21=fore:#000080,back:#EFEFFF
# SGML command
style.xml.22=fore:#000080,back:#EFEFFF,bold
# SGML 1st param
style.xml.23=fore:#006600,back:#EFEFFF
# SGML double string
style.xml.24=fore:#800000,back:#EFEFFF
# SGML single string
style.xml.25=fore:#993300,back:#EFEFFF
# SGML error
style.xml.26=fore:#800000,back:#FF6666
# SGML special (#xxxx type)
style.xml.27=fore:#3366FF,back:#EFEFFF
# SGML entity
style.xml.28=fore:#333333,back:#EFEFFF
# SGML comment
style.xml.29=fore:#808000,back:#EFEFFF
# SGML block
style.xml.31=fore:#000066,back:#CCCCE0
# No brace matching in XML
braces.xml.style=31

if PLAT_WIN
	command.go.$(file.patterns.web)="file://$(FilePath)"
	command.go.subsystem.$(file.patterns.web)=2
if PLAT_GTK
	command.go.$(file.patterns.web)=firefox "file://$(FilePath)"
if PLAT_MAC
	command.go.$(file.patterns.web)=open "file://$(FilePath)"
	command.go.subsystem.$(file.patterns.web)=2

command.go.$(file.patterns.php)=php -f "$(FileNameExt)"
command.compile.$(file.patterns.php)=php -l "$(FileNameExt)"

# Default
style.css.32=$(font.code.base)
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.css.0=fore:#FF0080
# Selector (HTML tag)
style.css.1=$(colour.keyword),bold
# Class selector ([HtmlTag].classSelector)
style.css.2=
# Pseudo class (HtmlTag:pseudoClass) see "keywords2" above
style.css.3=fore:#800000
# Unknown Pseudo class
style.css.4=$(colour.error)
# Operator
style.css.5=$(colour.operator)
# CSS1 Property, see keywords
style.css.6=$(colour.number)
# Unknown Property
style.css.7=fore:#FF0000
# Value
style.css.8=$(colour.string)
# Comment
style.css.9=$(colour.code.comment.box),$(font.code.comment.box)
# ID selector (#IdSel)
style.css.10=$(colour.number),italics
# "!important"
style.css.11=fore:#FF8000,bold
# At-rule (@) except @media
style.css.12=$(colour.preproc)
# Double quoted strings
style.css.13=$(colour.string)
# Single quoted strings
style.css.14=$(colour.string)
# CSS2 Property, see keywords3
style.css.15=$(colour.number)
# Attribute selection ([att='val'])
style.css.16=fore:#800000
# CSS3 Property, see keywords4
style.css.17=$(colour.number)
# Pseudo elements, see keywords5
style.css.18=fore:#C80000
# Other CSS Property, see keywords6
style.css.19=fore:#7F7F00
# Other Pseudoclass, see keywords7
style.css.20=fore:#7F7F00
# Other Pseudoelement, see keywords8
style.css.21=fore:#7F7F00
# "@media"
style.css.22=$(colour.preproc),bold
# Variable in SCSS, LESS, or HSS
style.css.23=fore:#DD9900

block.start.*.css=5 {
block.end.*.css=5 }


[ Tools menu ]


#~ command.name.1.*=Dictionary
#~ command.1.*=sdcv -n $(CurrentWord)
#~ command.subsystem.1.*=1
#~ command.mode.1.*=savebefore:no
#~ command.shortcut.1.*=Alt+d

#~ command.name.2.*=Smart Tab
#~ command.2.*=smart_tab
#~ command.subsystem.2.*=3
#~ command.mode.2.*=savebefore:no
#~ command.shortcut.2.*=Tab

#~ command.name.3.*=Toggle hook
#~ command.3.*=toggle_hook
#~ command.subsystem.3.*=3
#~ command.mode.3.*=savebefore:no
#~ command.shortcut.3.*=Alt+x



#~ ------------------------------------------------------------------
#~ tools for general editing
#~ ------------------------------------------------------------------

# Ctrl+ num

#~ command.name.1.*=Inline Spellcheck
#~ command.1.*=init_spell_check_block
#~ command.subsystem.1.*=3
#~ command.mode.1.*=savebefore:no

#~ command.name.2.*=Correct word
#~ command.2.*=suggest_word $(CurrentSelection)
#~ command.subsystem.2.*=3
#~ command.mode.2.*=savebefore:no

#~ command.name.3.*=See Calender
#~ command.3.*=date +Today%tis:%t%F && cal -NC3 -h
#~ command.subsystem.3.*=1
#~ command.mode.3.*=savebefore:no

#~ command.name.4.*=Insert Time
#~ command.4.*=insert_time
#~ command.subsystem.4.*=3
#~ command.mode.4.*=savebefore:no

#~ command.name.5.*=Normalize Time
#~ command.5.*=normalize_time
#~ command.subsystem.5.*=3
#~ command.mode.5.*=savebefore:no

					#~ command.name.6.*=render a block
					#~ command.6.*=* render_as $(1)
					#~ command.subsystem.6.*=3
					#~ command.mode.6.*=savebefore:no

#~ command.name.6.*=count words
#~ command.6.*=count_words $(CurrentSelection)
#~ command.subsystem.6.*=3
#~ command.mode.6.*=savebefore:no

#~ command.name.7.*=regularize sentences
#~ command.7.*=regularize
#~ command.subsystem.7.*=3
#~ command.mode.7.*=savebefore:no

#~ command.name.8.*=init gtd
#~ command.8.*=Open $(file.gtd)
#~ command.subsystem.8.*=3
#~ command.mode.8.*=savebefore:no

# other hotkeys

#~ command.name.11.*=Give up current function
#~ command.11.*=giveup_event
#~ command.subsystem.11.*=3
#~ command.shortcut.11.*=Ctrl+g
#~ command.mode.11.*=savebefore:no

#~ command.name.12.*=Execute string 
#~ command.12.*=init_string
#~ command.subsystem.12.*=3
#~ command.shortcut.12.*=Alt+x
#~ command.mode.12.*=savebefore:no

#~ command.name.13.*=Move ahead a sentence 
#~ command.13.*=move_sentence_ahead
#~ command.subsystem.13.*=3
#~ command.shortcut.13.*=Alt+a
#~ command.mode.13.*=savebefore:no

#~ command.name.14.*=Move to end of a sentence
#~ command.14.*=move_sentence_end
#~ command.subsystem.14.*=3
#~ command.shortcut.14.*=Alt+e
#~ command.mode.14.*=savebefore:no

#~ command.name.15.*=Select contents between braces
#~ command.15.*=select_brace
#~ command.subsystem.15.*=3
#~ command.shortcut.15.*=Ctrl+b
#~ command.mode.15.*=savebefore:no

#~ command.name.16.*=Input a path
#~ command.16.*=init_path
#~ command.subsystem.16.*=3
#~ command.shortcut.16.*=Ctrl+p
#~ command.mode.16.*=savebefore:no

#~ command.name.17.*=do snippet
#~ command.17.*=init_snippet
#~ command.subsystem.17.*=3
#~ command.shortcut.17.*=Alt+s
#~ command.mode.17.*=savebefore:no

#~ command.name.18.*=Insert a new line
#~ command.18.*=dostring gtd_newline()
#~ command.subsystem.18.*=3
#~ command.shortcut.18.*=Alt+Enter
#~ command.mode.18.*=savebefore:no 

#~ command.name.19.*=Open selected filename
#~ command.19.*=Open $(CurrentSelection)
#~ command.subsystem.19.*=3
#~ command.shortcut.19.*=Alt+o
#~ command.mode.19.*=savebefore:no

#~ command.name.20.*=Show outline
#~ command.20.*=show_outline
#~ command.subsystem.20.*=3
#~ command.shortcut.20.*=Alt+l
#~ command.mode.20.*=savebefore:no

#~ command.name.21.*=Select a fold
#~ command.21.*=select_fold
#~ command.subsystem.21.*=3
#~ command.shortcut.21.*=Alt+f
#~ command.mode.21.*=savebefore:no

#~ command.name.22.*=Calculate selection
#~ command.22.*=calculate_selection $(CurrentSelection)
#~ command.subsystem.22.*=3
#~ command.shortcut.22.*=Alt+z
#~ command.mode.22.*=savebefore:no

#~ command.name.23.*=Next fold
#~ command.23.*=next_fold
#~ command.subsystem.23.*=3
#~ command.shortcut.23.*=Alt+Down
#~ command.mode.23.*=savebefore:no

#~ command.name.24.*=Previous fold
#~ command.24.*=prev_fold
#~ command.subsystem.24.*=3
#~ command.shortcut.24.*=Alt+Up
#~ command.mode.24.*=savebefore:no

#~ command.name.23.*=Preview
#~ command.23.*=see "$(CurrentSelection)"
#~ command.subsystem.23.*=2
#~ command.shortcut.23.*=Alt+p
#~ command.mode.23.*=savebefore:no

#~ command.name.24.*=swap content
#~ command.24.*=swap_content 
#~ command.subsystem.24.*=3
#~ command.shortcut.24.*=Alt+w
#~ command.mode.24.*=before:no




#~ command.go.*.cfg=lua $(FilePath)
#~ command.go.subsystem.*.cfg=0

command.go.*.cmd=$(CurrentSelection)
command.go.subsystem.*.cmd=0

lexer.*.cmd=shell

ext.lua.auto.reload=0

[javascript]

abbreviations.*.js;=$(SciteUserHome)/js_abbrev.properties

command.go.*.js=nodejs "$(FileNameExt)"
command.go.subsystem.*.js=0
[elm]
file.patterns.elm=*.elm
lexer.$(file.patterns.elm)=haskell

dir.elm=/home/yipf/elm/

command.go.$(file.patterns.elm)=cd $(dir.elm); export PATH=$PATH:$(dir.elm);  elm-make "$(FilePath)" --output="$(FilePath).html"
command.go.subsystem.$(file.patterns.elm)=0

keywords.$(file.patterns.elm)= \
case class data default deriving do else \
forall if import in infix infixl infixr instance \
let module newtype of return then type where _ alias exposing

word.characters.$(file.patterns.elm)=$(chars.alpha)$(chars.numeric)_'

comment.stream.start.elm={-
comment.stream.end.elm=-}
comment.block.elm=-- ~
comment.block.at.line.start.elm=1
comment.box.start.elm={-
comment.box.middle.elm= -
comment.box.end.elm= -}


[plantuml]

file.patterns.uml=*.uml;
lexer.$(file.patterns.uml)=lisp

command.go.$(file.patterns.uml)=plantuml "$(FilePath)"
command.go.subsystem.$(file.patterns.uml)=0

keywords.$(file.patterns.uml)=start stop partition fork again endfork if then endif detach note endnote floating ^@ ^! rectangle node cloud package database folder frame


command.compile.$(file.patterns.uml)=plantuml -tsvg "$(FilePath)"
command.compile.subsystem.$(file.patterns.uml)=0

# Special
style.lisp.0=$(colour.string)
abbreviations.*.uml;=$(SciteUserHome)/uml_abbrev.properties

[m4]

file.patterns.m4=*.m4;
lexer.$(file.patterns.m4)=css

command.go.$(file.patterns.m4)=m4 "$(FilePath)"
command.go.subsystem.$(file.patterns.m4)=0

keywords.$(file.patterns.m4)=start stop partition fork again endfork if then endif detach note endnote floating ^@ ^! rectangle node cloud package database folder frame


# Special
style.lisp.0=$(colour.string)
abbreviations.*.m4;=$(SciteUserHome)/m4_abbrev.properties

[ylisp]
file.patterns.ylsp=*.ylsp;
lexer.$(file.patterns.ylsp)=lisp
keywords.$(file.patterns.ylsp)=^*_*

[bibtex]


